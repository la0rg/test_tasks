// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/put.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GCacheValue struct {
	Value       *GValue `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	VectorClock *VC     `protobuf:"bytes,2,opt,name=vector_clock,json=vectorClock" json:"vector_clock,omitempty"`
}

func (m *GCacheValue) Reset()                    { *m = GCacheValue{} }
func (m *GCacheValue) String() string            { return proto.CompactTextString(m) }
func (*GCacheValue) ProtoMessage()               {}
func (*GCacheValue) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *GCacheValue) GetValue() *GValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *GCacheValue) GetVectorClock() *VC {
	if m != nil {
		return m.VectorClock
	}
	return nil
}

type GValue struct {
	Type    uint32             `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Gstring string             `protobuf:"bytes,2,opt,name=gstring" json:"gstring,omitempty"`
	Glist   []*GValue          `protobuf:"bytes,3,rep,name=glist" json:"glist,omitempty"`
	Gmap    map[string]*GValue `protobuf:"bytes,4,rep,name=gmap" json:"gmap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GValue) Reset()                    { *m = GValue{} }
func (m *GValue) String() string            { return proto.CompactTextString(m) }
func (*GValue) ProtoMessage()               {}
func (*GValue) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *GValue) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *GValue) GetGstring() string {
	if m != nil {
		return m.Gstring
	}
	return ""
}

func (m *GValue) GetGlist() []*GValue {
	if m != nil {
		return m.Glist
	}
	return nil
}

func (m *GValue) GetGmap() map[string]*GValue {
	if m != nil {
		return m.Gmap
	}
	return nil
}

type GError struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *GError) Reset()                    { *m = GError{} }
func (m *GError) String() string            { return proto.CompactTextString(m) }
func (*GError) ProtoMessage()               {}
func (*GError) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *GError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*GCacheValue)(nil), "rpc.GCacheValue")
	proto.RegisterType((*GValue)(nil), "rpc.GValue")
	proto.RegisterType((*GError)(nil), "rpc.GError")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PutService service

type PutServiceClient interface {
	PutValue(ctx context.Context, in *GCacheValue, opts ...grpc.CallOption) (*GError, error)
}

type putServiceClient struct {
	cc *grpc.ClientConn
}

func NewPutServiceClient(cc *grpc.ClientConn) PutServiceClient {
	return &putServiceClient{cc}
}

func (c *putServiceClient) PutValue(ctx context.Context, in *GCacheValue, opts ...grpc.CallOption) (*GError, error) {
	out := new(GError)
	err := grpc.Invoke(ctx, "/rpc.PutService/PutValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PutService service

type PutServiceServer interface {
	PutValue(context.Context, *GCacheValue) (*GError, error)
}

func RegisterPutServiceServer(s *grpc.Server, srv PutServiceServer) {
	s.RegisterService(&_PutService_serviceDesc, srv)
}

func _PutService_PutValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GCacheValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutServiceServer).PutValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.PutService/PutValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutServiceServer).PutValue(ctx, req.(*GCacheValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _PutService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PutService",
	HandlerType: (*PutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutValue",
			Handler:    _PutService_PutValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/put.proto",
}

func init() { proto.RegisterFile("rpc/put.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xc9, 0x9f, 0xa6, 0x66, 0x62, 0xa1, 0x2c, 0x2a, 0x21, 0x07, 0xa9, 0x39, 0x59, 0x0f,
	0x11, 0xea, 0x41, 0xf1, 0x1a, 0x4b, 0xae, 0x65, 0x85, 0x9e, 0x04, 0x89, 0xcb, 0x12, 0x43, 0xd3,
	0x66, 0x99, 0x6e, 0x02, 0xf9, 0x8a, 0x7e, 0x2a, 0xd9, 0xd9, 0x6a, 0x0b, 0xe2, 0xed, 0xcd, 0xbc,
	0xb7, 0xbf, 0x9d, 0xd9, 0x85, 0x09, 0x2a, 0x71, 0xaf, 0x3a, 0x9d, 0x29, 0x6c, 0x75, 0xcb, 0x3c,
	0x54, 0x22, 0xb9, 0x32, 0xbd, 0x5e, 0x0a, 0xdd, 0xe2, 0xbb, 0x68, 0x5a, 0xb1, 0xb1, 0x66, 0xfa,
	0x06, 0x51, 0x91, 0x97, 0xe2, 0x53, 0xae, 0xcb, 0xa6, 0x93, 0xec, 0x06, 0x46, 0xbd, 0x11, 0xb1,
	0x33, 0x73, 0x6e, 0xa3, 0x45, 0x94, 0xa1, 0x12, 0x59, 0x41, 0x1e, 0xb7, 0x0e, 0xbb, 0x83, 0xf3,
	0x53, 0x4e, 0xec, 0x52, 0x72, 0x4c, 0xc9, 0x75, 0xce, 0x23, 0x6b, 0xe6, 0xc6, 0x4b, 0xbf, 0x1c,
	0x08, 0xec, 0x69, 0xc6, 0xc0, 0xd7, 0x83, 0xb2, 0xe0, 0x09, 0x27, 0xcd, 0x62, 0x18, 0x57, 0x7b,
	0x8d, 0xf5, 0xae, 0x22, 0x4a, 0xc8, 0x7f, 0x4a, 0x33, 0x47, 0xd5, 0xd4, 0x7b, 0x1d, 0x7b, 0x33,
	0xef, 0xcf, 0x1c, 0xe4, 0xb0, 0x39, 0xf8, 0xd5, 0xb6, 0x54, 0xb1, 0x4f, 0x89, 0xcb, 0x93, 0x44,
	0x56, 0x6c, 0x4b, 0xb5, 0xdc, 0x69, 0x1c, 0x38, 0x45, 0x92, 0x17, 0x08, 0x7f, 0x5b, 0x6c, 0x0a,
	0xde, 0x46, 0x0e, 0x34, 0x47, 0xc8, 0x8d, 0x3c, 0x2e, 0xed, 0xfe, 0xb7, 0xf4, 0xb3, 0xfb, 0xe4,
	0xa4, 0xd7, 0x10, 0x14, 0x4b, 0xc4, 0x16, 0xd9, 0x05, 0x8c, 0xa4, 0x11, 0x07, 0x88, 0x2d, 0x16,
	0x8f, 0x00, 0xab, 0x4e, 0xbf, 0x4a, 0xec, 0x6b, 0x21, 0xd9, 0x1c, 0xce, 0x56, 0x9d, 0xb6, 0xbb,
	0x4f, 0x2d, 0xf1, 0xf8, 0xce, 0xc9, 0xe1, 0x0e, 0xc2, 0x7d, 0x04, 0xf4, 0x15, 0x0f, 0xdf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x8d, 0xeb, 0xda, 0x75, 0xb8, 0x01, 0x00, 0x00,
}
