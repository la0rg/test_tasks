// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/node_service.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ClockedValue struct {
	Value       *CacheValue `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	VectorClock *VC         `protobuf:"bytes,2,opt,name=vector_clock,json=vectorClock" json:"vector_clock,omitempty"`
}

func (m *ClockedValue) Reset()                    { *m = ClockedValue{} }
func (m *ClockedValue) String() string            { return proto.CompactTextString(m) }
func (*ClockedValue) ProtoMessage()               {}
func (*ClockedValue) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ClockedValue) GetValue() *CacheValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ClockedValue) GetVectorClock() *VC {
	if m != nil {
		return m.VectorClock
	}
	return nil
}

type CacheValue struct {
	CType       uint32                 `protobuf:"varint,1,opt,name=c_type,json=cType" json:"c_type,omitempty"`
	StringValue string                 `protobuf:"bytes,2,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	ListValue   []*CacheValue          `protobuf:"bytes,3,rep,name=list_value,json=listValue" json:"list_value,omitempty"`
	DictValue   map[string]*CacheValue `protobuf:"bytes,4,rep,name=dict_value,json=dictValue" json:"dict_value,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CacheValue) Reset()                    { *m = CacheValue{} }
func (m *CacheValue) String() string            { return proto.CompactTextString(m) }
func (*CacheValue) ProtoMessage()               {}
func (*CacheValue) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CacheValue) GetCType() uint32 {
	if m != nil {
		return m.CType
	}
	return 0
}

func (m *CacheValue) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *CacheValue) GetListValue() []*CacheValue {
	if m != nil {
		return m.ListValue
	}
	return nil
}

func (m *CacheValue) GetDictValue() map[string]*CacheValue {
	if m != nil {
		return m.DictValue
	}
	return nil
}

type SetResult struct {
}

func (m *SetResult) Reset()                    { *m = SetResult{} }
func (m *SetResult) String() string            { return proto.CompactTextString(m) }
func (*SetResult) ProtoMessage()               {}
func (*SetResult) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func init() {
	proto.RegisterType((*ClockedValue)(nil), "rpc.ClockedValue")
	proto.RegisterType((*CacheValue)(nil), "rpc.CacheValue")
	proto.RegisterType((*SetResult)(nil), "rpc.SetResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeService service

type NodeServiceClient interface {
	Set(ctx context.Context, in *ClockedValue, opts ...grpc.CallOption) (*SetResult, error)
}

type nodeServiceClient struct {
	cc *grpc.ClientConn
}

func NewNodeServiceClient(cc *grpc.ClientConn) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) Set(ctx context.Context, in *ClockedValue, opts ...grpc.CallOption) (*SetResult, error) {
	out := new(SetResult)
	err := grpc.Invoke(ctx, "/rpc.NodeService/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeService service

type NodeServiceServer interface {
	Set(context.Context, *ClockedValue) (*SetResult, error)
}

func RegisterNodeServiceServer(s *grpc.Server, srv NodeServiceServer) {
	s.RegisterService(&_NodeService_serviceDesc, srv)
}

func _NodeService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockedValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Set(ctx, req.(*ClockedValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _NodeService_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/node_service.proto",
}

func init() { proto.RegisterFile("rpc/node_service.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x49, 0x62, 0x2b, 0x99, 0xc4, 0xaa, 0x0b, 0x4a, 0xc9, 0x41, 0x6a, 0x40, 0x28, 0x1e,
	0x22, 0xd4, 0x83, 0x22, 0x78, 0x8a, 0x1e, 0xf5, 0xb0, 0x91, 0x5e, 0x43, 0x9c, 0x0c, 0x1a, 0x1a,
	0xb2, 0xcb, 0x66, 0x1b, 0xc8, 0xdd, 0x1f, 0x2e, 0xd9, 0xb5, 0xb6, 0x8a, 0x78, 0x9b, 0x99, 0xf7,
	0xcd, 0x9b, 0x61, 0x06, 0x4e, 0x95, 0xc4, 0xab, 0x46, 0x94, 0x94, 0xb7, 0xa4, 0xba, 0x0a, 0x29,
	0x91, 0x4a, 0x68, 0xc1, 0x3c, 0x25, 0x31, 0x32, 0x62, 0x47, 0xa8, 0x85, 0xca, 0xb1, 0x16, 0xb8,
	0xb2, 0x62, 0x5c, 0x40, 0x98, 0x0e, 0x29, 0x95, 0xcb, 0xa2, 0x5e, 0x13, 0xbb, 0x80, 0x51, 0x37,
	0x04, 0x53, 0x67, 0xe6, 0xcc, 0x83, 0xc5, 0x61, 0xa2, 0x24, 0x26, 0x69, 0x81, 0xef, 0x64, 0x74,
	0x6e, 0x55, 0x76, 0x09, 0xe1, 0xae, 0xd9, 0xd4, 0x35, 0xf4, 0xbe, 0xa1, 0x97, 0x29, 0x0f, 0xac,
	0x68, 0x9c, 0xe3, 0x0f, 0x17, 0x60, 0xeb, 0xc0, 0x4e, 0x60, 0x8c, 0xb9, 0xee, 0xa5, 0x1d, 0x71,
	0xc0, 0x47, 0xf8, 0xd2, 0x4b, 0x62, 0xe7, 0x10, 0xb6, 0x5a, 0x55, 0xcd, 0x5b, 0x6e, 0xe7, 0x0f,
	0x8e, 0x3e, 0x0f, 0x6c, 0xcd, 0x76, 0x26, 0x00, 0x75, 0xd5, 0xea, 0x2f, 0xc0, 0x9b, 0x79, 0x7f,
	0x2d, 0xe8, 0x0f, 0x88, 0xe5, 0xef, 0x01, 0xca, 0x0a, 0x37, 0xfc, 0x9e, 0xe1, 0xcf, 0x7e, 0xf1,
	0xc9, 0x43, 0x85, 0x16, 0x7f, 0x6c, 0xb4, 0xea, 0xb9, 0x5f, 0x6e, 0xf2, 0xe8, 0x09, 0x26, 0x3f,
	0x45, 0x76, 0x04, 0xde, 0x8a, 0x7a, 0xb3, 0xb7, 0xcf, 0x87, 0x70, 0x7b, 0x2e, 0xf7, 0xbf, 0x73,
	0xdd, 0xb9, 0xb7, 0x4e, 0x1c, 0x80, 0x9f, 0x91, 0xe6, 0xd4, 0xae, 0x6b, 0xbd, 0xb8, 0x81, 0xe0,
	0x59, 0x94, 0x94, 0xd9, 0x47, 0xb1, 0x39, 0x78, 0x19, 0x69, 0x76, 0x6c, 0xdb, 0x77, 0xfe, 0x11,
	0x4d, 0x4c, 0xe9, 0xbb, 0xf1, 0x75, 0x6c, 0xde, 0x76, 0xfd, 0x19, 0x00, 0x00, 0xff, 0xff, 0x75,
	0xc3, 0x68, 0x52, 0xed, 0x01, 0x00, 0x00,
}
