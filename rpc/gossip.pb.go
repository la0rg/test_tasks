// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/gossip.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Membership struct {
	Endpoints   []*Membership_Endpoint `protobuf:"bytes,1,rep,name=endpoints" json:"endpoints,omitempty"`
	VectorClock *VC                    `protobuf:"bytes,2,opt,name=vector_clock,json=vectorClock" json:"vector_clock,omitempty"`
}

func (m *Membership) Reset()                    { *m = Membership{} }
func (m *Membership) String() string            { return proto.CompactTextString(m) }
func (*Membership) ProtoMessage()               {}
func (*Membership) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Membership) GetEndpoints() []*Membership_Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *Membership) GetVectorClock() *VC {
	if m != nil {
		return m.VectorClock
	}
	return nil
}

type Membership_Endpoint struct {
	Ip   []byte `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *Membership_Endpoint) Reset()                    { *m = Membership_Endpoint{} }
func (m *Membership_Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Membership_Endpoint) ProtoMessage()               {}
func (*Membership_Endpoint) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

func (m *Membership_Endpoint) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *Membership_Endpoint) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*Membership)(nil), "rpc.Membership")
	proto.RegisterType((*Membership_Endpoint)(nil), "rpc.Membership.Endpoint")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GossipService service

type GossipServiceClient interface {
	// Request paremeter should be used only for the new nodes connecting to the seed node
	// to make the seed node aware of them.
	// Any gossip request for membership should be requested with default-membership (empty)
	ReqForMembership(ctx context.Context, in *Membership, opts ...grpc.CallOption) (*Membership, error)
}

type gossipServiceClient struct {
	cc *grpc.ClientConn
}

func NewGossipServiceClient(cc *grpc.ClientConn) GossipServiceClient {
	return &gossipServiceClient{cc}
}

func (c *gossipServiceClient) ReqForMembership(ctx context.Context, in *Membership, opts ...grpc.CallOption) (*Membership, error) {
	out := new(Membership)
	err := grpc.Invoke(ctx, "/rpc.GossipService/ReqForMembership", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GossipService service

type GossipServiceServer interface {
	// Request paremeter should be used only for the new nodes connecting to the seed node
	// to make the seed node aware of them.
	// Any gossip request for membership should be requested with default-membership (empty)
	ReqForMembership(context.Context, *Membership) (*Membership, error)
}

func RegisterGossipServiceServer(s *grpc.Server, srv GossipServiceServer) {
	s.RegisterService(&_GossipService_serviceDesc, srv)
}

func _GossipService_ReqForMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Membership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServiceServer).ReqForMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.GossipService/ReqForMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServiceServer).ReqForMembership(ctx, req.(*Membership))
	}
	return interceptor(ctx, in, info, handler)
}

var _GossipService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.GossipService",
	HandlerType: (*GossipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReqForMembership",
			Handler:    _GossipService_ReqForMembership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/gossip.proto",
}

func init() { proto.RegisterFile("rpc/gossip.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0x4f, 0x4b, 0xc5, 0x30,
	0x10, 0xc4, 0x49, 0x9f, 0x7f, 0xb7, 0x4f, 0x7d, 0xe4, 0x20, 0xa1, 0xa7, 0xe2, 0xa9, 0x78, 0x88,
	0x50, 0xc5, 0x2f, 0x50, 0xaa, 0x27, 0x2f, 0x11, 0xbc, 0x0a, 0x8d, 0x41, 0x83, 0xda, 0x5d, 0x37,
	0xa1, 0x9f, 0xc7, 0x8f, 0x2a, 0x4d, 0x7d, 0xb4, 0xf4, 0xb6, 0xec, 0xfc, 0x66, 0x98, 0x81, 0x1d,
	0x93, 0xbd, 0x79, 0xc7, 0x10, 0x3c, 0x69, 0x62, 0x8c, 0x28, 0x37, 0x4c, 0xb6, 0xb8, 0x1c, 0xdf,
	0x83, 0xb3, 0x11, 0xf9, 0xd5, 0x7e, 0xa1, 0xfd, 0x9c, 0xc4, 0xab, 0x5f, 0x01, 0xf0, 0xe4, 0xbe,
	0x3b, 0xc7, 0xe1, 0xc3, 0x93, 0xbc, 0x87, 0x53, 0xd7, 0xbf, 0x11, 0xfa, 0x3e, 0x06, 0x25, 0xca,
	0x4d, 0x95, 0xd7, 0x4a, 0x33, 0x59, 0x3d, 0x33, 0xba, 0xfd, 0x07, 0xcc, 0x8c, 0xca, 0x6b, 0xd8,
	0x2e, 0xc3, 0x55, 0x56, 0x8a, 0x2a, 0xaf, 0x8f, 0x93, 0xf5, 0xa5, 0x31, 0xf9, 0x24, 0x36, 0xa3,
	0x56, 0x68, 0x38, 0xd9, 0x47, 0xc8, 0x73, 0xc8, 0x3c, 0x29, 0x51, 0x8a, 0x6a, 0x6b, 0x32, 0x4f,
	0x52, 0xc2, 0x01, 0x21, 0xc7, 0xe4, 0x3f, 0x34, 0xe9, 0xae, 0x5b, 0x38, 0x7b, 0x4c, 0x7b, 0x9e,
	0x1d, 0x0f, 0xde, 0x3a, 0x79, 0x07, 0x3b, 0xe3, 0x7e, 0x1e, 0x90, 0x17, 0xc5, 0x2f, 0x56, 0x2d,
	0x8b, 0xf5, 0xa3, 0x3b, 0x4a, 0x83, 0x6f, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x87, 0x1b,
	0x96, 0x21, 0x01, 0x00, 0x00,
}
